import org.gradle.jvm.toolchain.JavaLanguageVersion

plugins {
    id("java")
    id("groovy")
    id("jacoco")
    id("info.solidsoft.pitest") version  "1.19.0-rc.1"
    id("pmd")
    id("de.burger.it.build.domain.platform-conventions")
}

group = "de.burger.it"
version = "2.0-SNAPSHOT"

java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(21)
    }
}

jacoco {
    toolVersion = "0.8.12"
}

repositories {
    mavenCentral()
    google()
    gradlePluginPortal()
}

dependencies {
    // --- Spring ---
    implementation(libs.bundles.spring)
    testImplementation(libs.spring.test)

    // --- JetBrains annotations ---
    implementation(libs.annotations)

    // --- Lombok (needs specific configurations; do NOT bundle) ---
    compileOnly(libs.lombok)
    annotationProcessor(libs.lombok)
    testCompileOnly(libs.lombok)
    testAnnotationProcessor(libs.lombok)

    // --- JUnit 5 ---
    testImplementation(libs.bundles.junitApi)
    testRuntimeOnly(libs.bundles.junitRt)

    // --- Spock (with Groovy BOM as platform) ---
    testImplementation(platform(libs.groovy.bom)) // BOM must be added as platform
    testImplementation(libs.bundles.spock)

    // --- Mockito / Hamcrest ---
    testImplementation(libs.bundles.mockito)
    testImplementation(libs.hamcrest)

    // --- PIT (if you consume libs directly; plugin config separat) ---
    implementation(libs.bundles.pitest)
}


tasks.withType<Test>().configureEach {
    useJUnitPlatform()
    // Suppress JDK warning about dynamic Java agent loading (e.g., Byte Buddy used by Mockito)
    jvmArgs("-XX:+EnableDynamicAgentLoading")
    // Suppress CDS warning: "Sharing is only supported for bootloader classes because bootstrap classpath has been appended"
    // by disabling Class Data Sharing for the test JVM, since Mockito's Byte Buddy agent appends to the bootstrap classpath
    jvmArgs("-Xshare:off")
    finalizedBy(tasks.jacocoTestReport)

    // Use Provider-based build directory (Gradle 7+; recommended for 8/9+)
    val reportsDir = layout.buildDirectory.dir("reports/spock")

    // Pass absolute path lazily to the test JVM
    systemProperty(
        "com.athaydes.spockframework.report.outputDir",
        reportsDir.map { it.asFile.absolutePath }.get()
    )

    // Optional extras
    systemProperty("com.athaydes.spockframework.report.projectName", "Customer Service Specs")
    systemProperty("com.athaydes.spockframework.report.projectVersion", "2.0-SNAPSHOT")
    systemProperty("com.athaydes.spockframework.report.outputFormats", "html")
    systemProperty("com.athaydes.spockframework.report.showCodeBlocks", "true")
    // systemProperty("com.athaydes.spockframework.report.template.ReportConfiguration.showSummary", "true")
}

tasks.jacocoTestReport {
    dependsOn(tasks.test)
    reports {
        xml.required.set(true)
        xml.outputLocation.set(layout.buildDirectory.file("reports/jacoco/test/jacocoTestReport.xml"))
        csv.required.set(false)
        html.required.set(true)
    }
    // Exclude the application entry point from coverage reports
    classDirectories.setFrom(
        files(
            classDirectories.files.map {
                fileTree(it) {
                    exclude("de/burger/it/Main*")
                }
            }
        )
    )
}
tasks.named<JacocoCoverageVerification>("jacocoTestCoverageVerification") {
    // Fail the build if coverage is below 86%
    violationRules {
        rule {
            limit {
                // enforce 86% line coverage
                counter = "LINE"
                value = "COVEREDRATIO"
                minimum = "0.86".toBigDecimal()
            }
        }
    }
    // Exclude the application entry point from coverage verification
    classDirectories.setFrom(
        files(
            classDirectories.files.map {
                fileTree(it) {
                    exclude("de/burger/it/Main*")
                }
            }
        )
    )
    dependsOn(tasks.test)
}

tasks.check {
    dependsOn("jacocoTestCoverageVerification")
}

// PIT - Tests
configurations.named("pitest") {
    resolutionStrategy.eachDependency {
        if (requested.group == "org.pitest" && requested.name == "pitest-command-line") {
            useTarget("org.pitest:pitest-command-line:1.20.1")
            because("RC artifact is not published to Maven Central; use stable command-line")
        }
    }
}
pitest {
    // Align PIT core with the forced command-line above
    pitestVersion.set("1.20.1")

    // --- JDK 21 module openness fixes (Mockito/ByteBuddy/etc.) ---
    jvmArgs.set(
        listOf(
            "--add-opens", "java.base/java.lang=ALL-UNNAMED",
            "--add-opens", "java.base/java.util=ALL-UNNAMED",
            "--add-opens", "java.base/java.lang.invoke=ALL-UNNAMED",
            "--add-opens", "java.base/sun.nio.ch=ALL-UNNAMED"
        )
    )

    // --- diagnostics ---
    verbose.set(true)                     // More PIT logs
    useClasspathFile.set(true)            // Fix long classpath on Windows
    timestampedReports.set(true)

    // --- Scope of mutation testing (adapt to your packages) ---
    targetClasses.set(listOf("de.burger.it.*"))
    targetTests.set(listOf("de.burger.it.*Test", "de.burger.it.*IT"))
    failWhenNoMutations.set(false)         // fail fast if nothing matched (helps diagnose)

    // --- Runtime / reporting ---
    threads.set(4)
    outputFormats.set(listOf("HTML"))
    exportLineCoverage.set(true)
    timestampedReports.set(true)
    mutationThreshold.set(80)

    // --- Useful filters (speed + signal) ---
    excludedClasses.set(
        listOf(
            "de.burger.it.domain.*",
            "de.burger.it.Main*"
        )
    )
}

